{
  lib,
  config,
  pkgs,
  inputs ? {},
  ...
}: let
  inherit (lib) mkOption mkIf mkMerge types optionalAttrs optionals;
  cfg = config.attic_client;
  rb = config.attic_remote;

  haveInputsSops = inputs ? sops-nix;
  templateName = "attic/nix.conf"; # the nix.conf fragment we render via sops-nix
in {
  #### Import sops-nix if available (NO references to cfg/config here!) ####
  imports = lib.optionals haveInputsSops [inputs.sops-nix.nixosModules.sops];

  #### Options #################################################################
  options.attic_client = {
    enable = mkOption {
      type = types.bool;
      default = false;
    };

    addOfficialCache = mkOption {
      type = types.bool;
      default = true;
      description = "Keep https://cache.nixos.org in substituters.";
    };

    fallback = mkOption {
      type = types.bool;
      default = true;
      description = "Build from source when substituters fail.";
    };

    # SOPS-encrypted YAML with: endpoint, host, publicKey, token
    secretsFile = mkOption {
      type = types.path;
      example = ../../secrets/attic.yaml;
      description = "SOPS-encrypted YAML with Attic endpoint/host/publicKey/token.";
    };
  };

  options.attic_remote = {
    enable = mkOption {
      type = types.bool;
      default = false;
    };
    hostName = mkOption {
      type = types.str;
      example = "attic.c4rb0n.cloud";
    };
    sshUser = mkOption {
      type = types.str;
      default = "mhr";
    };
    sshKey = mkOption {
      type = types.nullOr types.path;
      default = null;
    };
    system = mkOption {
      type = types.str;
      default = config.nixpkgs.hostPlatform.system;
    };
    maxJobs = mkOption {
      type = types.int;
      default = 8;
    };
    speedFactor = mkOption {
      type = types.int;
      default = 2;
    };
    supportedFeatures = mkOption {
      type = types.listOf types.str;
      default = ["kvm" "big-parallel" "nixos-test"];
    };
    buildersUseSubstitutes = mkOption {
      type = types.bool;
      default = true;
    };
  };

  #### Config ##################################################################
  config = mkIf cfg.enable (mkMerge [
    # Render nix.conf fragment from the encrypted YAML with sops-nix
    {
      sops.secrets = {
        "attic/endpoint" = {
          sopsFile = cfg.secretsFile;
          format = "yaml";
          key = "endpoint";
        };
        "attic/host" = {
          sopsFile = cfg.secretsFile;
          format = "yaml";
          key = "host";
        };
        "attic/publicKey" = {
          sopsFile = cfg.secretsFile;
          format = "yaml";
          key = "publicKey";
        };
        "attic/token" = {
          sopsFile = cfg.secretsFile;
          format = "yaml";
          key = "attic_client_token";
        };
      };

      sops.templates.${templateName} = {
        content = ''
          # generated by sops-nix
          extra-substituters = ${config.sops.placeholder."attic/endpoint"}
          extra-trusted-public-keys = ${config.sops.placeholder."attic/publicKey"}
          access-tokens = ${config.sops.placeholder."attic/host"}=${config.sops.placeholder."attic/token"}
        '';
        owner = "root";
        group = "root";
        mode = "0440";
      };

      # Include the rendered fragment at runtime (no store leakage)
      nix.extraOptions = ''
        !include ${config.sops.templates.${templateName}.path}
      '';
    }

    (mkIf cfg.addOfficialCache {nix.settings.substituters = ["https://cache.nixos.org"];})
    {nix.settings.fallback = cfg.fallback;}

    (mkIf rb.enable {
      nix = {
        distributedBuilds = true;
        settings.builders-use-substitutes = rb.buildersUseSubstitutes;
        buildMachines = [
          ({
              inherit (rb) hostName;
              inherit (rb) sshUser;
              inherit (rb) system;
              inherit (rb) maxJobs;
              inherit (rb) speedFactor;
              inherit (rb) supportedFeatures;
            }
            // (optionalAttrs (rb.sshKey != null) {inherit (rb) sshKey;}))
        ];
      };
    })

    # Soft warning if sops-nix isn't available
    (mkIf (!haveInputsSops) {
      warnings = [
        ''
          inputs.sops-nix was not provided via specialArgs (specialArgs = { inherit inputs; };).
          Import sops-nix in your host/modules, or add it to specialArgs so this module can import it.
        ''
      ];
    })
  ]);
}
