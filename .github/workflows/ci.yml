name: CI â€” build & lint flake

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  lint-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # free a bunch of preinstalled stuff on GitHub runners
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/hostedtoolcache/CodeQL || true
          docker system prune -af || true

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show Nix version
        run: nix --version

      - name: Check formatting (treefmt)
        run: nix develop -c treefmt --ci

      - name: Statix lints
        run: nix run nixpkgs#statix -- check .

      - name: Deadnix (dead code)
        run: nix run nixpkgs#deadnix -- .

      - name: Flake checks
        run: nix flake check --all-systems

      - name: Build all NixOS hosts (sequential, GC between)
        shell: bash
        run: |
          set -euo pipefail
          hosts=$(nix eval --json .#nixosConfigurations --apply 'builtins.attrNames' | jq -r '.[]' || true)
          for h in $hosts; do
            echo "Building host: ${h}"
            nix build --no-link ".#nixosConfigurations.${h}.config.system.build.toplevel"
            # GC with new (nix >= 2.20) and old commands for compatibility
            (nix store gc || nix-collect-garbage -d) || true
          done

      # The blow approach fails due to limited disk space

      # - name: Build all NixOS hosts
      #   shell: bash
      #   run: |
      #     set -euo pipefail
      #     hosts=$(nix eval --json .#nixosConfigurations --apply 'builtins.attrNames' | jq -r '.[]' || true)
      #     if [[ -n "${hosts}" ]]; then
      #       for h in ${hosts}; do
      #         echo "Building host: ${h}"
      #         nix build ".#nixosConfigurations.${h}.config.system.build.toplevel"
      #       done
      #     else
      #       echo "No nixosConfigurations found; skipping host builds."
      #     fi
